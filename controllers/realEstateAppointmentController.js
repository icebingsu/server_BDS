const { Contact, RealEstateAppointment, RealEstate, User } = require('../models');

module.exports = {
  async create(req, res) {
    const { name, phone, Mail, mail, user_id, date, time, desc, real_estate_id } = req.body;

    if (!real_estate_id || !date || !time) {
      return res.status(400).json({
        error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc (real_estate_id, ng√†y ho·∫∑c gi·ªù)",
      });
    }

    try {
      const dateObj = new Date(date);
      if (isNaN(dateObj.getTime())) {
        return res.status(400).json({ error: "Ng√†y kh√¥ng h·ª£p l·ªá" });
      }

      const dateStrOnly = dateObj.toISOString().split("T")[0];
      const timeStr = time.length === 5 ? time : time.padStart(5, "0");
      const combinedDateTimeStr = `${dateStrOnly}T${timeStr}`;
      const appointment_time = new Date(combinedDateTimeStr);

      if (isNaN(appointment_time.getTime())) {
        return res.status(400).json({ error: "Th·ªùi gian h·∫πn kh√¥ng h·ª£p l·ªá" });
      }

      if (appointment_time < new Date()) {
        return res.status(400).json({ error: "Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch ·ªü th·ªùi ƒëi·ªÉm ƒë√£ qua" });
      }

      let contact = null;

      if (user_id) {
        // ‚úÖ Ki·ªÉm tra user t·ªìn t·∫°i
        const user = await User.findByPk(user_id);
        if (!user) {
          return res.status(400).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i (user_id kh√¥ng h·ª£p l·ªá)" });
        }

        // ‚úÖ T√¨m contact theo user
        contact = await Contact.findOne({ where: { user_id } });

        if (!contact) {
          contact = await Contact.create({
            name: name || null,
            phone: phone || null,
            email: Mail || mail || null,
            user_id,
          });
        }
      } else {
        // Kh√¥ng c√≥ user_id, t·∫°o contact ·∫©n danh
        contact = await Contact.create({
          name: name || null,
          phone: phone || null,
          email: Mail || mail || null,
        });
      }

      // T·∫°o l·ªãch h·∫πn
      const appointment = await RealEstateAppointment.create({
        real_estate_id: Number(real_estate_id),
        contact_name: name || null,
        contact_phone: phone || null,
        contact_email: Mail || mail || null,
        contact_id: contact.id,
        appointment_time,
        note: desc || null,
        status: "pending",
      });

      return res.status(201).json(appointment);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫°o l·ªãch h·∫πn:", err);
      return res.status(500).json({
        error: "L·ªói h·ªá th·ªëng khi t·∫°o l·ªãch h·∫πn",
        details: err.message,
      });
    }
  },
  async getByRealEstate(req, res) {
    try {
      const { real_estate_id } = req.params;

      const appointments = await RealEstateAppointment.findAll({
        where: { real_estate_id },
        order: [["appointment_time", "ASC"]],
      });

      return res.json(appointments);
    } catch (err) {
      return res.status(500).json({ error: "L·ªói l·∫•y l·ªãch h·∫πn" });
    }
  },
  async updateStatus(req, res) {
    try {
      const { id } = req.params;
      const { status } = req.body;

      const appointment = await RealEstateAppointment.findByPk(id);
      if (!appointment)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn" });

      appointment.status = status;
      await appointment.save();

      return res.json(appointment);
    } catch (err) {
      return res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
    }
  },
  async getRealEstateByUser(req, res) {
    try {
      const { id_user } = req.params;
      // üîç T√¨m t·∫•t c·∫£ contact thu·ªôc user
      const contacts = await Contact.findAll({
        where: { user_id: id_user },
        attributes: ['id'],
      });

      const contactIds = contacts.map((c) => c.id);

      if (contactIds.length === 0) {
        return res.json([]); // ‚ùå Kh√¥ng c√≥ contact n√†o ‚Üí kh√¥ng c√≥ l·ªãch h·∫πn
      }

      // üìÖ T√¨m t·∫•t c·∫£ l·ªãch h·∫πn theo contact_id
      const appointments = await RealEstateAppointment.findAll({
        where: { contact_id: contactIds },
        include: [
          {
            model: RealEstate,
            as: 'real_estate',
            attributes: ['id', 'title', 'price', 'address'],
          },
        ],
        order: [['appointment_time', 'DESC']],
      });

      return res.json(appointments);
    } catch (err) {
      console.error('‚ùå L·ªói l·∫•y l·ªãch h·∫πn theo user:', err);
      return res.status(500).json({ error: 'L·ªói h·ªá th·ªëng khi l·∫•y l·ªãch h·∫πn' });
    }
  }
};
